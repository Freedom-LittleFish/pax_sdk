// Autogenerated from Pigeon (v3.1.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name
// @dart = 2.12
import 'dart:async';
import 'dart:typed_data' show Uint8List, Int32List, Int64List, Float64List;

import 'package:flutter/foundation.dart' show WriteBuffer, ReadBuffer;
import 'package:flutter/services.dart';

class AutoRentalInfo {
  AutoRentalInfo({
    this.AgreementNumber,
    this.DailyRate,
    this.RentalDuration,
    this.InsuranceAmount,
    this.AllocatedMiles,
    this.MileRate,
    this.Name,
    this.DriverLicenseNumber,
    this.RentalProgramType,
    this.PickupLocationName,
    this.PickupCity,
    this.PickupState,
    this.PickupCountryCode,
    this.PickupDatetime,
    this.ReturnLocation,
    this.ReturnCity,
    this.ReturnState,
    this.ReturnCountryCode,
    this.ReturnDatetime,
    this.TotalMiles,
    this.CustomerTaxID,
    this.VehicleClassID,
    this.ExtraChargeItems,
    this.ExtraChargesAmount,
  });

  String? AgreementNumber;
  String? DailyRate;
  String? RentalDuration;
  String? InsuranceAmount;
  String? AllocatedMiles;
  String? MileRate;
  String? Name;
  String? DriverLicenseNumber;
  String? RentalProgramType;
  String? PickupLocationName;
  String? PickupCity;
  String? PickupState;
  String? PickupCountryCode;
  String? PickupDatetime;
  String? ReturnLocation;
  String? ReturnCity;
  String? ReturnState;
  String? ReturnCountryCode;
  String? ReturnDatetime;
  String? TotalMiles;
  String? CustomerTaxID;
  String? VehicleClassID;
  List<ExtraChargeItem?>? ExtraChargeItems;
  String? ExtraChargesAmount;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['AgreementNumber'] = AgreementNumber;
    pigeonMap['DailyRate'] = DailyRate;
    pigeonMap['RentalDuration'] = RentalDuration;
    pigeonMap['InsuranceAmount'] = InsuranceAmount;
    pigeonMap['AllocatedMiles'] = AllocatedMiles;
    pigeonMap['MileRate'] = MileRate;
    pigeonMap['Name'] = Name;
    pigeonMap['DriverLicenseNumber'] = DriverLicenseNumber;
    pigeonMap['RentalProgramType'] = RentalProgramType;
    pigeonMap['PickupLocationName'] = PickupLocationName;
    pigeonMap['PickupCity'] = PickupCity;
    pigeonMap['PickupState'] = PickupState;
    pigeonMap['PickupCountryCode'] = PickupCountryCode;
    pigeonMap['PickupDatetime'] = PickupDatetime;
    pigeonMap['ReturnLocation'] = ReturnLocation;
    pigeonMap['ReturnCity'] = ReturnCity;
    pigeonMap['ReturnState'] = ReturnState;
    pigeonMap['ReturnCountryCode'] = ReturnCountryCode;
    pigeonMap['ReturnDatetime'] = ReturnDatetime;
    pigeonMap['TotalMiles'] = TotalMiles;
    pigeonMap['CustomerTaxID'] = CustomerTaxID;
    pigeonMap['VehicleClassID'] = VehicleClassID;
    pigeonMap['ExtraChargeItems'] = ExtraChargeItems;
    pigeonMap['ExtraChargesAmount'] = ExtraChargesAmount;
    return pigeonMap;
  }

  static AutoRentalInfo decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return AutoRentalInfo(
      AgreementNumber: pigeonMap['AgreementNumber'] as String?,
      DailyRate: pigeonMap['DailyRate'] as String?,
      RentalDuration: pigeonMap['RentalDuration'] as String?,
      InsuranceAmount: pigeonMap['InsuranceAmount'] as String?,
      AllocatedMiles: pigeonMap['AllocatedMiles'] as String?,
      MileRate: pigeonMap['MileRate'] as String?,
      Name: pigeonMap['Name'] as String?,
      DriverLicenseNumber: pigeonMap['DriverLicenseNumber'] as String?,
      RentalProgramType: pigeonMap['RentalProgramType'] as String?,
      PickupLocationName: pigeonMap['PickupLocationName'] as String?,
      PickupCity: pigeonMap['PickupCity'] as String?,
      PickupState: pigeonMap['PickupState'] as String?,
      PickupCountryCode: pigeonMap['PickupCountryCode'] as String?,
      PickupDatetime: pigeonMap['PickupDatetime'] as String?,
      ReturnLocation: pigeonMap['ReturnLocation'] as String?,
      ReturnCity: pigeonMap['ReturnCity'] as String?,
      ReturnState: pigeonMap['ReturnState'] as String?,
      ReturnCountryCode: pigeonMap['ReturnCountryCode'] as String?,
      ReturnDatetime: pigeonMap['ReturnDatetime'] as String?,
      TotalMiles: pigeonMap['TotalMiles'] as String?,
      CustomerTaxID: pigeonMap['CustomerTaxID'] as String?,
      VehicleClassID: pigeonMap['VehicleClassID'] as String?,
      ExtraChargeItems: (pigeonMap['ExtraChargeItems'] as List<Object?>?)?.cast<ExtraChargeItem?>(),
      ExtraChargesAmount: pigeonMap['ExtraChargesAmount'] as String?,
    );
  }
}

class CommercialCard {
  CommercialCard({
    this.PONumber,
    this.CustomerCode,
    this.TaxExempt,
    this.TaxExemptID,
    this.MerchantTaxID,
    this.DestinationZipCode,
    this.ProductDescription,
    this.ShipFromZipCode,
    this.DestinationCountryCode,
    this.TaxDetails,
    this.SummaryCommodityCode,
    this.DiscountAmount,
    this.FreightAmount,
    this.DutyAmount,
    this.OrderDate,
    this.LineItemDetails,
    this.ShippingCompany,
    this.ShippingTrackingNumber,
    this.AdditionalFees,
  });

  String? PONumber;
  String? CustomerCode;
  String? TaxExempt;
  String? TaxExemptID;
  String? MerchantTaxID;
  String? DestinationZipCode;
  String? ProductDescription;
  String? ShipFromZipCode;
  String? DestinationCountryCode;
  List<TaxDetail?>? TaxDetails;
  String? SummaryCommodityCode;
  String? DiscountAmount;
  String? FreightAmount;
  String? DutyAmount;
  String? OrderDate;
  List<LineItemDetail?>? LineItemDetails;
  String? ShippingCompany;
  String? ShippingTrackingNumber;
  String? AdditionalFees;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['PONumber'] = PONumber;
    pigeonMap['CustomerCode'] = CustomerCode;
    pigeonMap['TaxExempt'] = TaxExempt;
    pigeonMap['TaxExemptID'] = TaxExemptID;
    pigeonMap['MerchantTaxID'] = MerchantTaxID;
    pigeonMap['DestinationZipCode'] = DestinationZipCode;
    pigeonMap['ProductDescription'] = ProductDescription;
    pigeonMap['ShipFromZipCode'] = ShipFromZipCode;
    pigeonMap['DestinationCountryCode'] = DestinationCountryCode;
    pigeonMap['TaxDetails'] = TaxDetails;
    pigeonMap['SummaryCommodityCode'] = SummaryCommodityCode;
    pigeonMap['DiscountAmount'] = DiscountAmount;
    pigeonMap['FreightAmount'] = FreightAmount;
    pigeonMap['DutyAmount'] = DutyAmount;
    pigeonMap['OrderDate'] = OrderDate;
    pigeonMap['LineItemDetails'] = LineItemDetails;
    pigeonMap['ShippingCompany'] = ShippingCompany;
    pigeonMap['ShippingTrackingNumber'] = ShippingTrackingNumber;
    pigeonMap['AdditionalFees'] = AdditionalFees;
    return pigeonMap;
  }

  static CommercialCard decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return CommercialCard(
      PONumber: pigeonMap['PONumber'] as String?,
      CustomerCode: pigeonMap['CustomerCode'] as String?,
      TaxExempt: pigeonMap['TaxExempt'] as String?,
      TaxExemptID: pigeonMap['TaxExemptID'] as String?,
      MerchantTaxID: pigeonMap['MerchantTaxID'] as String?,
      DestinationZipCode: pigeonMap['DestinationZipCode'] as String?,
      ProductDescription: pigeonMap['ProductDescription'] as String?,
      ShipFromZipCode: pigeonMap['ShipFromZipCode'] as String?,
      DestinationCountryCode: pigeonMap['DestinationCountryCode'] as String?,
      TaxDetails: (pigeonMap['TaxDetails'] as List<Object?>?)?.cast<TaxDetail?>(),
      SummaryCommodityCode: pigeonMap['SummaryCommodityCode'] as String?,
      DiscountAmount: pigeonMap['DiscountAmount'] as String?,
      FreightAmount: pigeonMap['FreightAmount'] as String?,
      DutyAmount: pigeonMap['DutyAmount'] as String?,
      OrderDate: pigeonMap['OrderDate'] as String?,
      LineItemDetails: (pigeonMap['LineItemDetails'] as List<Object?>?)?.cast<LineItemDetail?>(),
      ShippingCompany: pigeonMap['ShippingCompany'] as String?,
      ShippingTrackingNumber: pigeonMap['ShippingTrackingNumber'] as String?,
      AdditionalFees: pigeonMap['AdditionalFees'] as String?,
    );
  }
}

class ExtraChargeItem {
  ExtraChargeItem({
    this.ItemType,
    this.ExtraChargeAmount,
  });

  String? ItemType;
  String? ExtraChargeAmount;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['ItemType'] = ItemType;
    pigeonMap['ExtraChargeAmount'] = ExtraChargeAmount;
    return pigeonMap;
  }

  static ExtraChargeItem decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return ExtraChargeItem(
      ItemType: pigeonMap['ItemType'] as String?,
      ExtraChargeAmount: pigeonMap['ExtraChargeAmount'] as String?,
    );
  }
}

class FleetCard {
  FleetCard({
    this.Odometer,
    this.VehicleNumber,
    this.JobNumber,
    this.DriverId,
    this.EmployeeNumber,
    this.LicenseNumber,
    this.JobId,
    this.DepartmentNumber,
    this.CustomerData,
    this.UserId,
    this.VehicleId,
    this.FleetPromptCode,
  });

  String? Odometer;
  String? VehicleNumber;
  String? JobNumber;
  String? DriverId;
  String? EmployeeNumber;
  String? LicenseNumber;
  String? JobId;
  String? DepartmentNumber;
  String? CustomerData;
  String? UserId;
  String? VehicleId;
  String? FleetPromptCode;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['Odometer'] = Odometer;
    pigeonMap['VehicleNumber'] = VehicleNumber;
    pigeonMap['JobNumber'] = JobNumber;
    pigeonMap['DriverId'] = DriverId;
    pigeonMap['EmployeeNumber'] = EmployeeNumber;
    pigeonMap['LicenseNumber'] = LicenseNumber;
    pigeonMap['JobId'] = JobId;
    pigeonMap['DepartmentNumber'] = DepartmentNumber;
    pigeonMap['CustomerData'] = CustomerData;
    pigeonMap['UserId'] = UserId;
    pigeonMap['VehicleId'] = VehicleId;
    pigeonMap['FleetPromptCode'] = FleetPromptCode;
    return pigeonMap;
  }

  static FleetCard decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return FleetCard(
      Odometer: pigeonMap['Odometer'] as String?,
      VehicleNumber: pigeonMap['VehicleNumber'] as String?,
      JobNumber: pigeonMap['JobNumber'] as String?,
      DriverId: pigeonMap['DriverId'] as String?,
      EmployeeNumber: pigeonMap['EmployeeNumber'] as String?,
      LicenseNumber: pigeonMap['LicenseNumber'] as String?,
      JobId: pigeonMap['JobId'] as String?,
      DepartmentNumber: pigeonMap['DepartmentNumber'] as String?,
      CustomerData: pigeonMap['CustomerData'] as String?,
      UserId: pigeonMap['UserId'] as String?,
      VehicleId: pigeonMap['VehicleId'] as String?,
      FleetPromptCode: pigeonMap['FleetPromptCode'] as String?,
    );
  }
}

class HostCredentialInformation {
  HostCredentialInformation({
    this.MID,
    this.ServiceUser,
    this.ServicePassword,
  });

  String? MID;
  String? ServiceUser;
  String? ServicePassword;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['MID'] = MID;
    pigeonMap['ServiceUser'] = ServiceUser;
    pigeonMap['ServicePassword'] = ServicePassword;
    return pigeonMap;
  }

  static HostCredentialInformation decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return HostCredentialInformation(
      MID: pigeonMap['MID'] as String?,
      ServiceUser: pigeonMap['ServiceUser'] as String?,
      ServicePassword: pigeonMap['ServicePassword'] as String?,
    );
  }
}

class HostGateWay {
  HostGateWay({
    this.HRef,
    this.GatewayId,
    this.TokenRequestFlag,
    this.Token,
    this.CardType,
    this.PassThruData,
    this.ReturnReason,
    this.StationId,
    this.GlobalUid,
    this.CustomizeData1,
    this.CustomizeData2,
    this.CustomizeData3,
    this.EwicDiscountAmount,
    this.TokenSerialNum,
  });

  String? HRef;
  String? GatewayId;
  String? TokenRequestFlag;
  String? Token;
  String? CardType;
  String? PassThruData;
  String? ReturnReason;
  String? StationId;
  String? GlobalUid;
  String? CustomizeData1;
  String? CustomizeData2;
  String? CustomizeData3;
  String? EwicDiscountAmount;
  String? TokenSerialNum;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['HRef'] = HRef;
    pigeonMap['GatewayId'] = GatewayId;
    pigeonMap['TokenRequestFlag'] = TokenRequestFlag;
    pigeonMap['Token'] = Token;
    pigeonMap['CardType'] = CardType;
    pigeonMap['PassThruData'] = PassThruData;
    pigeonMap['ReturnReason'] = ReturnReason;
    pigeonMap['StationId'] = StationId;
    pigeonMap['GlobalUid'] = GlobalUid;
    pigeonMap['CustomizeData1'] = CustomizeData1;
    pigeonMap['CustomizeData2'] = CustomizeData2;
    pigeonMap['CustomizeData3'] = CustomizeData3;
    pigeonMap['EwicDiscountAmount'] = EwicDiscountAmount;
    pigeonMap['TokenSerialNum'] = TokenSerialNum;
    return pigeonMap;
  }

  static HostGateWay decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return HostGateWay(
      HRef: pigeonMap['HRef'] as String?,
      GatewayId: pigeonMap['GatewayId'] as String?,
      TokenRequestFlag: pigeonMap['TokenRequestFlag'] as String?,
      Token: pigeonMap['Token'] as String?,
      CardType: pigeonMap['CardType'] as String?,
      PassThruData: pigeonMap['PassThruData'] as String?,
      ReturnReason: pigeonMap['ReturnReason'] as String?,
      StationId: pigeonMap['StationId'] as String?,
      GlobalUid: pigeonMap['GlobalUid'] as String?,
      CustomizeData1: pigeonMap['CustomizeData1'] as String?,
      CustomizeData2: pigeonMap['CustomizeData2'] as String?,
      CustomizeData3: pigeonMap['CustomizeData3'] as String?,
      EwicDiscountAmount: pigeonMap['EwicDiscountAmount'] as String?,
      TokenSerialNum: pigeonMap['TokenSerialNum'] as String?,
    );
  }
}

class LineItemDetail {
  LineItemDetail({
    this.ItemSequenceNumber,
    this.ProductCode,
    this.ItemCommodityCode,
    this.ItemDescription,
    this.ItemQuantity,
    this.ItemMeasurementUnit,
    this.ItemUnitPrice,
    this.ItemDiscountAmount,
    this.ItemDiscountRate,
    this.TaxDetails,
    this.LineItemTotal,
  });

  String? ItemSequenceNumber;
  String? ProductCode;
  String? ItemCommodityCode;
  String? ItemDescription;
  String? ItemQuantity;
  String? ItemMeasurementUnit;
  String? ItemUnitPrice;
  String? ItemDiscountAmount;
  String? ItemDiscountRate;
  List<TaxDetail?>? TaxDetails;
  String? LineItemTotal;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['ItemSequenceNumber'] = ItemSequenceNumber;
    pigeonMap['ProductCode'] = ProductCode;
    pigeonMap['ItemCommodityCode'] = ItemCommodityCode;
    pigeonMap['ItemDescription'] = ItemDescription;
    pigeonMap['ItemQuantity'] = ItemQuantity;
    pigeonMap['ItemMeasurementUnit'] = ItemMeasurementUnit;
    pigeonMap['ItemUnitPrice'] = ItemUnitPrice;
    pigeonMap['ItemDiscountAmount'] = ItemDiscountAmount;
    pigeonMap['ItemDiscountRate'] = ItemDiscountRate;
    pigeonMap['TaxDetails'] = TaxDetails;
    pigeonMap['LineItemTotal'] = LineItemTotal;
    return pigeonMap;
  }

  static LineItemDetail decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return LineItemDetail(
      ItemSequenceNumber: pigeonMap['ItemSequenceNumber'] as String?,
      ProductCode: pigeonMap['ProductCode'] as String?,
      ItemCommodityCode: pigeonMap['ItemCommodityCode'] as String?,
      ItemDescription: pigeonMap['ItemDescription'] as String?,
      ItemQuantity: pigeonMap['ItemQuantity'] as String?,
      ItemMeasurementUnit: pigeonMap['ItemMeasurementUnit'] as String?,
      ItemUnitPrice: pigeonMap['ItemUnitPrice'] as String?,
      ItemDiscountAmount: pigeonMap['ItemDiscountAmount'] as String?,
      ItemDiscountRate: pigeonMap['ItemDiscountRate'] as String?,
      TaxDetails: (pigeonMap['TaxDetails'] as List<Object?>?)?.cast<TaxDetail?>(),
      LineItemTotal: pigeonMap['LineItemTotal'] as String?,
    );
  }
}

class LodgingInfo {
  LodgingInfo({
    this.RoomNumber,
    this.FolioNumber,
    this.roomRates,
    this.ChargeType,
    this.NoShowFlag,
    this.CheckInDate,
    this.CheckOutDate,
    this.SpecialProgramCode,
    this.DepartureAdjustedAmount,
    this.LodgingItems,
  });

  String? RoomNumber;
  String? FolioNumber;
  List<RoomRates?>? roomRates;
  String? ChargeType;
  String? NoShowFlag;
  String? CheckInDate;
  String? CheckOutDate;
  String? SpecialProgramCode;
  String? DepartureAdjustedAmount;
  List<LodgingItem?>? LodgingItems;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['RoomNumber'] = RoomNumber;
    pigeonMap['FolioNumber'] = FolioNumber;
    pigeonMap['roomRates'] = roomRates;
    pigeonMap['ChargeType'] = ChargeType;
    pigeonMap['NoShowFlag'] = NoShowFlag;
    pigeonMap['CheckInDate'] = CheckInDate;
    pigeonMap['CheckOutDate'] = CheckOutDate;
    pigeonMap['SpecialProgramCode'] = SpecialProgramCode;
    pigeonMap['DepartureAdjustedAmount'] = DepartureAdjustedAmount;
    pigeonMap['LodgingItems'] = LodgingItems;
    return pigeonMap;
  }

  static LodgingInfo decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return LodgingInfo(
      RoomNumber: pigeonMap['RoomNumber'] as String?,
      FolioNumber: pigeonMap['FolioNumber'] as String?,
      roomRates: (pigeonMap['roomRates'] as List<Object?>?)?.cast<RoomRates?>(),
      ChargeType: pigeonMap['ChargeType'] as String?,
      NoShowFlag: pigeonMap['NoShowFlag'] as String?,
      CheckInDate: pigeonMap['CheckInDate'] as String?,
      CheckOutDate: pigeonMap['CheckOutDate'] as String?,
      SpecialProgramCode: pigeonMap['SpecialProgramCode'] as String?,
      DepartureAdjustedAmount: pigeonMap['DepartureAdjustedAmount'] as String?,
      LodgingItems: (pigeonMap['LodgingItems'] as List<Object?>?)?.cast<LodgingItem?>(),
    );
  }
}

class LodgingItem {
  LodgingItem({
    this.ItemType,
    this.ItemAmount,
    this.ItemCode,
  });

  String? ItemType;
  String? ItemAmount;
  String? ItemCode;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['ItemType'] = ItemType;
    pigeonMap['ItemAmount'] = ItemAmount;
    pigeonMap['ItemCode'] = ItemCode;
    return pigeonMap;
  }

  static LodgingItem decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return LodgingItem(
      ItemType: pigeonMap['ItemType'] as String?,
      ItemAmount: pigeonMap['ItemAmount'] as String?,
      ItemCode: pigeonMap['ItemCode'] as String?,
    );
  }
}

class MultiMerchant {
  MultiMerchant({
    this.Id,
    this.Name,
  });

  String? Id;
  String? Name;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['Id'] = Id;
    pigeonMap['Name'] = Name;
    return pigeonMap;
  }

  static MultiMerchant decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return MultiMerchant(
      Id: pigeonMap['Id'] as String?,
      Name: pigeonMap['Name'] as String?,
    );
  }
}

class Original {
  Original({
    this.TransDate,
    this.Pan,
    this.ExpiryDate,
    this.TransTime,
    this.SettlementDate,
    this.TransType,
    this.Amount,
    this.BatchNumber,
    this.TransId,
    this.PaymentService2000,
    this.AuthorizationResponse,
  });

  String? TransDate;
  String? Pan;
  String? ExpiryDate;
  String? TransTime;
  String? SettlementDate;
  String? TransType;
  String? Amount;
  String? BatchNumber;
  String? TransId;
  String? PaymentService2000;
  String? AuthorizationResponse;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['TransDate'] = TransDate;
    pigeonMap['Pan'] = Pan;
    pigeonMap['ExpiryDate'] = ExpiryDate;
    pigeonMap['TransTime'] = TransTime;
    pigeonMap['SettlementDate'] = SettlementDate;
    pigeonMap['TransType'] = TransType;
    pigeonMap['Amount'] = Amount;
    pigeonMap['BatchNumber'] = BatchNumber;
    pigeonMap['TransId'] = TransId;
    pigeonMap['PaymentService2000'] = PaymentService2000;
    pigeonMap['AuthorizationResponse'] = AuthorizationResponse;
    return pigeonMap;
  }

  static Original decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return Original(
      TransDate: pigeonMap['TransDate'] as String?,
      Pan: pigeonMap['Pan'] as String?,
      ExpiryDate: pigeonMap['ExpiryDate'] as String?,
      TransTime: pigeonMap['TransTime'] as String?,
      SettlementDate: pigeonMap['SettlementDate'] as String?,
      TransType: pigeonMap['TransType'] as String?,
      Amount: pigeonMap['Amount'] as String?,
      BatchNumber: pigeonMap['BatchNumber'] as String?,
      TransId: pigeonMap['TransId'] as String?,
      PaymentService2000: pigeonMap['PaymentService2000'] as String?,
      AuthorizationResponse: pigeonMap['AuthorizationResponse'] as String?,
    );
  }
}

class PaymentRequest {
  PaymentRequest({
    this.TenderType,
    this.TransType,
    this.Amount,
    this.CashBackAmt,
    this.ClerkID,
    this.Zip,
    this.TipAmt,
    this.TaxAmt,
    this.Street,
    this.Street2,
    this.SurchargeAmt,
    this.ServerID,
    this.AutoSubmit,
    this.PONum,
    this.OrigRefNum,
    this.Misc3Amt,
    this.Misc2Amt,
    this.Misc1Amt,
    this.MerchantKey,
    this.InvNum,
    this.ECRRefNum,
    this.ECRTransID,
    this.OrigECRRefNum,
    this.AuthCode,
    this.ExtData,
    this.FuelAmt,
    this.ContinuousScreen,
    this.ServiceFee,
    this.GiftCardType,
    this.commercialCard,
    this.restaurant,
    this.hostGateWay,
    this.transactionBehavior,
    this.original,
    this.fleetCard,
    this.multiMerchant,
    this.lodgingInfo,
    this.autoRentalInfo,
    this.CVVBypassReason,
    this.GiftTenderType,
    this.OrigTraceNum,
    this.hostCredentialInformation,
  });

  int? TenderType;
  int? TransType;
  String? Amount;
  String? CashBackAmt;
  String? ClerkID;
  String? Zip;
  String? TipAmt;
  String? TaxAmt;
  String? Street;
  String? Street2;
  String? SurchargeAmt;
  String? ServerID;
  String? AutoSubmit;
  String? PONum;
  String? OrigRefNum;
  String? Misc3Amt;
  String? Misc2Amt;
  String? Misc1Amt;
  String? MerchantKey;
  String? InvNum;
  String? ECRRefNum;
  String? ECRTransID;
  String? OrigECRRefNum;
  String? AuthCode;
  String? ExtData;
  String? FuelAmt;
  String? ContinuousScreen;
  String? ServiceFee;
  String? GiftCardType;
  CommercialCard? commercialCard;
  Restaurant? restaurant;
  HostGateWay? hostGateWay;
  TransactionBehavior? transactionBehavior;
  Original? original;
  FleetCard? fleetCard;
  MultiMerchant? multiMerchant;
  LodgingInfo? lodgingInfo;
  AutoRentalInfo? autoRentalInfo;
  String? CVVBypassReason;
  String? GiftTenderType;
  String? OrigTraceNum;
  HostCredentialInformation? hostCredentialInformation;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['TenderType'] = TenderType;
    pigeonMap['TransType'] = TransType;
    pigeonMap['Amount'] = Amount;
    pigeonMap['CashBackAmt'] = CashBackAmt;
    pigeonMap['ClerkID'] = ClerkID;
    pigeonMap['Zip'] = Zip;
    pigeonMap['TipAmt'] = TipAmt;
    pigeonMap['TaxAmt'] = TaxAmt;
    pigeonMap['Street'] = Street;
    pigeonMap['Street2'] = Street2;
    pigeonMap['SurchargeAmt'] = SurchargeAmt;
    pigeonMap['ServerID'] = ServerID;
    pigeonMap['AutoSubmit'] = AutoSubmit;
    pigeonMap['PONum'] = PONum;
    pigeonMap['OrigRefNum'] = OrigRefNum;
    pigeonMap['Misc3Amt'] = Misc3Amt;
    pigeonMap['Misc2Amt'] = Misc2Amt;
    pigeonMap['Misc1Amt'] = Misc1Amt;
    pigeonMap['MerchantKey'] = MerchantKey;
    pigeonMap['InvNum'] = InvNum;
    pigeonMap['ECRRefNum'] = ECRRefNum;
    pigeonMap['ECRTransID'] = ECRTransID;
    pigeonMap['OrigECRRefNum'] = OrigECRRefNum;
    pigeonMap['AuthCode'] = AuthCode;
    pigeonMap['ExtData'] = ExtData;
    pigeonMap['FuelAmt'] = FuelAmt;
    pigeonMap['ContinuousScreen'] = ContinuousScreen;
    pigeonMap['ServiceFee'] = ServiceFee;
    pigeonMap['GiftCardType'] = GiftCardType;
    pigeonMap['commercialCard'] = commercialCard?.encode();
    pigeonMap['restaurant'] = restaurant?.encode();
    pigeonMap['hostGateWay'] = hostGateWay?.encode();
    pigeonMap['transactionBehavior'] = transactionBehavior?.encode();
    pigeonMap['original'] = original?.encode();
    pigeonMap['fleetCard'] = fleetCard?.encode();
    pigeonMap['multiMerchant'] = multiMerchant?.encode();
    pigeonMap['lodgingInfo'] = lodgingInfo?.encode();
    pigeonMap['autoRentalInfo'] = autoRentalInfo?.encode();
    pigeonMap['CVVBypassReason'] = CVVBypassReason;
    pigeonMap['GiftTenderType'] = GiftTenderType;
    pigeonMap['OrigTraceNum'] = OrigTraceNum;
    pigeonMap['hostCredentialInformation'] = hostCredentialInformation?.encode();
    return pigeonMap;
  }

  static PaymentRequest decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return PaymentRequest(
      TenderType: pigeonMap['TenderType'] as int?,
      TransType: pigeonMap['TransType'] as int?,
      Amount: pigeonMap['Amount'] as String?,
      CashBackAmt: pigeonMap['CashBackAmt'] as String?,
      ClerkID: pigeonMap['ClerkID'] as String?,
      Zip: pigeonMap['Zip'] as String?,
      TipAmt: pigeonMap['TipAmt'] as String?,
      TaxAmt: pigeonMap['TaxAmt'] as String?,
      Street: pigeonMap['Street'] as String?,
      Street2: pigeonMap['Street2'] as String?,
      SurchargeAmt: pigeonMap['SurchargeAmt'] as String?,
      ServerID: pigeonMap['ServerID'] as String?,
      AutoSubmit: pigeonMap['AutoSubmit'] as String?,
      PONum: pigeonMap['PONum'] as String?,
      OrigRefNum: pigeonMap['OrigRefNum'] as String?,
      Misc3Amt: pigeonMap['Misc3Amt'] as String?,
      Misc2Amt: pigeonMap['Misc2Amt'] as String?,
      Misc1Amt: pigeonMap['Misc1Amt'] as String?,
      MerchantKey: pigeonMap['MerchantKey'] as String?,
      InvNum: pigeonMap['InvNum'] as String?,
      ECRRefNum: pigeonMap['ECRRefNum'] as String?,
      ECRTransID: pigeonMap['ECRTransID'] as String?,
      OrigECRRefNum: pigeonMap['OrigECRRefNum'] as String?,
      AuthCode: pigeonMap['AuthCode'] as String?,
      ExtData: pigeonMap['ExtData'] as String?,
      FuelAmt: pigeonMap['FuelAmt'] as String?,
      ContinuousScreen: pigeonMap['ContinuousScreen'] as String?,
      ServiceFee: pigeonMap['ServiceFee'] as String?,
      GiftCardType: pigeonMap['GiftCardType'] as String?,
      commercialCard: pigeonMap['commercialCard'] != null
          ? CommercialCard.decode(pigeonMap['commercialCard']!)
          : null,
      restaurant: pigeonMap['restaurant'] != null
          ? Restaurant.decode(pigeonMap['restaurant']!)
          : null,
      hostGateWay: pigeonMap['hostGateWay'] != null
          ? HostGateWay.decode(pigeonMap['hostGateWay']!)
          : null,
      transactionBehavior: pigeonMap['transactionBehavior'] != null
          ? TransactionBehavior.decode(pigeonMap['transactionBehavior']!)
          : null,
      original: pigeonMap['original'] != null
          ? Original.decode(pigeonMap['original']!)
          : null,
      fleetCard: pigeonMap['fleetCard'] != null
          ? FleetCard.decode(pigeonMap['fleetCard']!)
          : null,
      multiMerchant: pigeonMap['multiMerchant'] != null
          ? MultiMerchant.decode(pigeonMap['multiMerchant']!)
          : null,
      lodgingInfo: pigeonMap['lodgingInfo'] != null
          ? LodgingInfo.decode(pigeonMap['lodgingInfo']!)
          : null,
      autoRentalInfo: pigeonMap['autoRentalInfo'] != null
          ? AutoRentalInfo.decode(pigeonMap['autoRentalInfo']!)
          : null,
      CVVBypassReason: pigeonMap['CVVBypassReason'] as String?,
      GiftTenderType: pigeonMap['GiftTenderType'] as String?,
      OrigTraceNum: pigeonMap['OrigTraceNum'] as String?,
      hostCredentialInformation: pigeonMap['hostCredentialInformation'] != null
          ? HostCredentialInformation.decode(pigeonMap['hostCredentialInformation']!)
          : null,
    );
  }
}

class Restaurant {
  Restaurant({
    this.TableNumber,
    this.GuestNumber,
    this.TicketNumber,
  });

  String? TableNumber;
  String? GuestNumber;
  String? TicketNumber;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['TableNumber'] = TableNumber;
    pigeonMap['GuestNumber'] = GuestNumber;
    pigeonMap['TicketNumber'] = TicketNumber;
    return pigeonMap;
  }

  static Restaurant decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return Restaurant(
      TableNumber: pigeonMap['TableNumber'] as String?,
      GuestNumber: pigeonMap['GuestNumber'] as String?,
      TicketNumber: pigeonMap['TicketNumber'] as String?,
    );
  }
}

class RoomRates {
  RoomRates({
    this.StayDuration,
    this.RoomRateAmount,
    this.RoomRateTax,
  });

  String? StayDuration;
  String? RoomRateAmount;
  String? RoomRateTax;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['StayDuration'] = StayDuration;
    pigeonMap['RoomRateAmount'] = RoomRateAmount;
    pigeonMap['RoomRateTax'] = RoomRateTax;
    return pigeonMap;
  }

  static RoomRates decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return RoomRates(
      StayDuration: pigeonMap['StayDuration'] as String?,
      RoomRateAmount: pigeonMap['RoomRateAmount'] as String?,
      RoomRateTax: pigeonMap['RoomRateTax'] as String?,
    );
  }
}

class TaxDetail {
  TaxDetail({
    this.TaxType,
    this.TaxAmount,
    this.TaxRate,
    this.MerChantTaxID,
    this.CustomerTaxID,
    this.VATInvoiceNumber,
    this.AlternateTaxID,
  });

  String? TaxType;
  String? TaxAmount;
  String? TaxRate;
  String? MerChantTaxID;
  String? CustomerTaxID;
  String? VATInvoiceNumber;
  String? AlternateTaxID;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['TaxType'] = TaxType;
    pigeonMap['TaxAmount'] = TaxAmount;
    pigeonMap['TaxRate'] = TaxRate;
    pigeonMap['MerChantTaxID'] = MerChantTaxID;
    pigeonMap['CustomerTaxID'] = CustomerTaxID;
    pigeonMap['VATInvoiceNumber'] = VATInvoiceNumber;
    pigeonMap['AlternateTaxID'] = AlternateTaxID;
    return pigeonMap;
  }

  static TaxDetail decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return TaxDetail(
      TaxType: pigeonMap['TaxType'] as String?,
      TaxAmount: pigeonMap['TaxAmount'] as String?,
      TaxRate: pigeonMap['TaxRate'] as String?,
      MerChantTaxID: pigeonMap['MerChantTaxID'] as String?,
      CustomerTaxID: pigeonMap['CustomerTaxID'] as String?,
      VATInvoiceNumber: pigeonMap['VATInvoiceNumber'] as String?,
      AlternateTaxID: pigeonMap['AlternateTaxID'] as String?,
    );
  }
}

class TransactionBehavior {
  TransactionBehavior({
    this.SignatureCaptureFlag,
    this.TipRequestFlag,
    this.SignatureUploadFlag,
    this.StatusReportFlag,
    this.AcceptedCardType,
    this.ProgramPromptsFlag,
    this.SignatureAcquireFlag,
    this.EntryMode,
    this.ReceiptPrintFlag,
    this.CardPresentMode,
    this.DebitNetwork,
    this.UserLanguage,
    this.AddlRspDataFlag,
    this.ForceCC,
    this.ForceFsa,
    this.AccessibilityPinPad,
    this.ForceDuplicate,
  });

  String? SignatureCaptureFlag;
  String? TipRequestFlag;
  String? SignatureUploadFlag;
  String? StatusReportFlag;
  String? AcceptedCardType;
  String? ProgramPromptsFlag;
  String? SignatureAcquireFlag;
  String? EntryMode;
  String? ReceiptPrintFlag;
  String? CardPresentMode;
  String? DebitNetwork;
  String? UserLanguage;
  String? AddlRspDataFlag;
  String? ForceCC;
  String? ForceFsa;
  String? AccessibilityPinPad;
  String? ForceDuplicate;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['SignatureCaptureFlag'] = SignatureCaptureFlag;
    pigeonMap['TipRequestFlag'] = TipRequestFlag;
    pigeonMap['SignatureUploadFlag'] = SignatureUploadFlag;
    pigeonMap['StatusReportFlag'] = StatusReportFlag;
    pigeonMap['AcceptedCardType'] = AcceptedCardType;
    pigeonMap['ProgramPromptsFlag'] = ProgramPromptsFlag;
    pigeonMap['SignatureAcquireFlag'] = SignatureAcquireFlag;
    pigeonMap['EntryMode'] = EntryMode;
    pigeonMap['ReceiptPrintFlag'] = ReceiptPrintFlag;
    pigeonMap['CardPresentMode'] = CardPresentMode;
    pigeonMap['DebitNetwork'] = DebitNetwork;
    pigeonMap['UserLanguage'] = UserLanguage;
    pigeonMap['AddlRspDataFlag'] = AddlRspDataFlag;
    pigeonMap['ForceCC'] = ForceCC;
    pigeonMap['ForceFsa'] = ForceFsa;
    pigeonMap['AccessibilityPinPad'] = AccessibilityPinPad;
    pigeonMap['ForceDuplicate'] = ForceDuplicate;
    return pigeonMap;
  }

  static TransactionBehavior decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return TransactionBehavior(
      SignatureCaptureFlag: pigeonMap['SignatureCaptureFlag'] as String?,
      TipRequestFlag: pigeonMap['TipRequestFlag'] as String?,
      SignatureUploadFlag: pigeonMap['SignatureUploadFlag'] as String?,
      StatusReportFlag: pigeonMap['StatusReportFlag'] as String?,
      AcceptedCardType: pigeonMap['AcceptedCardType'] as String?,
      ProgramPromptsFlag: pigeonMap['ProgramPromptsFlag'] as String?,
      SignatureAcquireFlag: pigeonMap['SignatureAcquireFlag'] as String?,
      EntryMode: pigeonMap['EntryMode'] as String?,
      ReceiptPrintFlag: pigeonMap['ReceiptPrintFlag'] as String?,
      CardPresentMode: pigeonMap['CardPresentMode'] as String?,
      DebitNetwork: pigeonMap['DebitNetwork'] as String?,
      UserLanguage: pigeonMap['UserLanguage'] as String?,
      AddlRspDataFlag: pigeonMap['AddlRspDataFlag'] as String?,
      ForceCC: pigeonMap['ForceCC'] as String?,
      ForceFsa: pigeonMap['ForceFsa'] as String?,
      AccessibilityPinPad: pigeonMap['AccessibilityPinPad'] as String?,
      ForceDuplicate: pigeonMap['ForceDuplicate'] as String?,
    );
  }
}

class AddlRspData {
  AddlRspData({
    this.ACI,
    this.TransID,
    this.CardLevelResult,
    this.SourceReasonCode,
    this.BankNetData,
    this.POSEntryModeChg,
    this.TranEditErrCode,
    this.DiscProcCode,
    this.DiscPOSEntry,
    this.DiscRespCode,
    this.POSData,
    this.DiscTransQualifier,
    this.DiscNRID,
    this.TrnmsnDateTime,
    this.OrigSTAN,
    this.CVVErrorCode,
    this.XCodeResp,
    this.AthNtwkID,
    this.TermEntryCapablt,
    this.POSEntryMode,
    this.ServCode,
    this.SpendQInd,
    this.WltID,
    this.LocalDateTime,
    this.EMVTags,
  });

  String? ACI;
  String? TransID;
  String? CardLevelResult;
  String? SourceReasonCode;
  String? BankNetData;
  String? POSEntryModeChg;
  String? TranEditErrCode;
  String? DiscProcCode;
  String? DiscPOSEntry;
  String? DiscRespCode;
  String? POSData;
  String? DiscTransQualifier;
  String? DiscNRID;
  String? TrnmsnDateTime;
  String? OrigSTAN;
  String? CVVErrorCode;
  String? XCodeResp;
  String? AthNtwkID;
  String? TermEntryCapablt;
  String? POSEntryMode;
  String? ServCode;
  String? SpendQInd;
  String? WltID;
  String? LocalDateTime;
  String? EMVTags;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['ACI'] = ACI;
    pigeonMap['TransID'] = TransID;
    pigeonMap['CardLevelResult'] = CardLevelResult;
    pigeonMap['SourceReasonCode'] = SourceReasonCode;
    pigeonMap['BankNetData'] = BankNetData;
    pigeonMap['POSEntryModeChg'] = POSEntryModeChg;
    pigeonMap['TranEditErrCode'] = TranEditErrCode;
    pigeonMap['DiscProcCode'] = DiscProcCode;
    pigeonMap['DiscPOSEntry'] = DiscPOSEntry;
    pigeonMap['DiscRespCode'] = DiscRespCode;
    pigeonMap['POSData'] = POSData;
    pigeonMap['DiscTransQualifier'] = DiscTransQualifier;
    pigeonMap['DiscNRID'] = DiscNRID;
    pigeonMap['TrnmsnDateTime'] = TrnmsnDateTime;
    pigeonMap['OrigSTAN'] = OrigSTAN;
    pigeonMap['CVVErrorCode'] = CVVErrorCode;
    pigeonMap['XCodeResp'] = XCodeResp;
    pigeonMap['AthNtwkID'] = AthNtwkID;
    pigeonMap['TermEntryCapablt'] = TermEntryCapablt;
    pigeonMap['POSEntryMode'] = POSEntryMode;
    pigeonMap['ServCode'] = ServCode;
    pigeonMap['SpendQInd'] = SpendQInd;
    pigeonMap['WltID'] = WltID;
    pigeonMap['LocalDateTime'] = LocalDateTime;
    pigeonMap['EMVTags'] = EMVTags;
    return pigeonMap;
  }

  static AddlRspData decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return AddlRspData(
      ACI: pigeonMap['ACI'] as String?,
      TransID: pigeonMap['TransID'] as String?,
      CardLevelResult: pigeonMap['CardLevelResult'] as String?,
      SourceReasonCode: pigeonMap['SourceReasonCode'] as String?,
      BankNetData: pigeonMap['BankNetData'] as String?,
      POSEntryModeChg: pigeonMap['POSEntryModeChg'] as String?,
      TranEditErrCode: pigeonMap['TranEditErrCode'] as String?,
      DiscProcCode: pigeonMap['DiscProcCode'] as String?,
      DiscPOSEntry: pigeonMap['DiscPOSEntry'] as String?,
      DiscRespCode: pigeonMap['DiscRespCode'] as String?,
      POSData: pigeonMap['POSData'] as String?,
      DiscTransQualifier: pigeonMap['DiscTransQualifier'] as String?,
      DiscNRID: pigeonMap['DiscNRID'] as String?,
      TrnmsnDateTime: pigeonMap['TrnmsnDateTime'] as String?,
      OrigSTAN: pigeonMap['OrigSTAN'] as String?,
      CVVErrorCode: pigeonMap['CVVErrorCode'] as String?,
      XCodeResp: pigeonMap['XCodeResp'] as String?,
      AthNtwkID: pigeonMap['AthNtwkID'] as String?,
      TermEntryCapablt: pigeonMap['TermEntryCapablt'] as String?,
      POSEntryMode: pigeonMap['POSEntryMode'] as String?,
      ServCode: pigeonMap['ServCode'] as String?,
      SpendQInd: pigeonMap['SpendQInd'] as String?,
      WltID: pigeonMap['WltID'] as String?,
      LocalDateTime: pigeonMap['LocalDateTime'] as String?,
      EMVTags: pigeonMap['EMVTags'] as String?,
    );
  }
}

class CardInfo {
  CardInfo({
    this.CardBin,
    this.NewCardBin,
    this.ProgramType,
  });

  String? CardBin;
  String? NewCardBin;
  String? ProgramType;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['CardBin'] = CardBin;
    pigeonMap['NewCardBin'] = NewCardBin;
    pigeonMap['ProgramType'] = ProgramType;
    return pigeonMap;
  }

  static CardInfo decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return CardInfo(
      CardBin: pigeonMap['CardBin'] as String?,
      NewCardBin: pigeonMap['NewCardBin'] as String?,
      ProgramType: pigeonMap['ProgramType'] as String?,
    );
  }
}

class PaymentEmvTag {
  PaymentEmvTag({
    this.Ac,
    this.Aip,
    this.Avn,
    this.IssuerAuthData,
    this.Cdol2,
    this.Hred,
    this.TacDefault,
    this.TacDenial,
    this.TacOnline,
    this.IacDefault,
    this.IacDenial,
    this.IacOnline,
    this.Auc,
    this.PanSeqNum,
  });

  String? Ac;
  String? Aip;
  String? Avn;
  String? IssuerAuthData;
  String? Cdol2;
  String? Hred;
  String? TacDefault;
  String? TacDenial;
  String? TacOnline;
  String? IacDefault;
  String? IacDenial;
  String? IacOnline;
  String? Auc;
  String? PanSeqNum;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['Ac'] = Ac;
    pigeonMap['Aip'] = Aip;
    pigeonMap['Avn'] = Avn;
    pigeonMap['IssuerAuthData'] = IssuerAuthData;
    pigeonMap['Cdol2'] = Cdol2;
    pigeonMap['Hred'] = Hred;
    pigeonMap['TacDefault'] = TacDefault;
    pigeonMap['TacDenial'] = TacDenial;
    pigeonMap['TacOnline'] = TacOnline;
    pigeonMap['IacDefault'] = IacDefault;
    pigeonMap['IacDenial'] = IacDenial;
    pigeonMap['IacOnline'] = IacOnline;
    pigeonMap['Auc'] = Auc;
    pigeonMap['PanSeqNum'] = PanSeqNum;
    return pigeonMap;
  }

  static PaymentEmvTag decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return PaymentEmvTag(
      Ac: pigeonMap['Ac'] as String?,
      Aip: pigeonMap['Aip'] as String?,
      Avn: pigeonMap['Avn'] as String?,
      IssuerAuthData: pigeonMap['IssuerAuthData'] as String?,
      Cdol2: pigeonMap['Cdol2'] as String?,
      Hred: pigeonMap['Hred'] as String?,
      TacDefault: pigeonMap['TacDefault'] as String?,
      TacDenial: pigeonMap['TacDenial'] as String?,
      TacOnline: pigeonMap['TacOnline'] as String?,
      IacDefault: pigeonMap['IacDefault'] as String?,
      IacDenial: pigeonMap['IacDenial'] as String?,
      IacOnline: pigeonMap['IacOnline'] as String?,
      Auc: pigeonMap['Auc'] as String?,
      PanSeqNum: pigeonMap['PanSeqNum'] as String?,
    );
  }
}

class PaymentResponse {
  PaymentResponse({
    this.AuthCode,
    this.ApprovedAmount,
    this.AvsResponse,
    this.BogusAccountNum,
    this.CardType,
    this.CvResponse,
    this.HostCode,
    this.HostResponse,
    this.Message,
    this.RefNum,
    this.RawResponse,
    this.RemainingBalance,
    this.ExtraBalance,
    this.RequestedAmount,
    this.ResultCode,
    this.ResultTxt,
    this.Timestamp,
    this.SigFileName,
    this.SignData,
    this.TransactionIntegrityClass,
    this.vASResponseInfo,
    this.tORResponseInfo,
    this.addlRspData,
    this.restaurant,
    this.multiMerchant,
    this.cardInfo,
    this.fleetCard,
    this.paymentTransInfo,
    this.paymentEmvTag,
    this.ExtData,
  });

  String? AuthCode;
  String? ApprovedAmount;
  String? AvsResponse;
  String? BogusAccountNum;
  String? CardType;
  String? CvResponse;
  String? HostCode;
  String? HostResponse;
  String? Message;
  String? RefNum;
  String? RawResponse;
  String? RemainingBalance;
  String? ExtraBalance;
  String? RequestedAmount;
  String? ResultCode;
  String? ResultTxt;
  String? Timestamp;
  String? SigFileName;
  String? SignData;
  String? TransactionIntegrityClass;
  VASResponseInfo? vASResponseInfo;
  TORResponseInfo? tORResponseInfo;
  AddlRspData? addlRspData;
  Restaurant? restaurant;
  MultiMerchant? multiMerchant;
  CardInfo? cardInfo;
  FleetCard? fleetCard;
  PaymentTransInfo? paymentTransInfo;
  PaymentEmvTag? paymentEmvTag;
  String? ExtData;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['AuthCode'] = AuthCode;
    pigeonMap['ApprovedAmount'] = ApprovedAmount;
    pigeonMap['AvsResponse'] = AvsResponse;
    pigeonMap['BogusAccountNum'] = BogusAccountNum;
    pigeonMap['CardType'] = CardType;
    pigeonMap['CvResponse'] = CvResponse;
    pigeonMap['HostCode'] = HostCode;
    pigeonMap['HostResponse'] = HostResponse;
    pigeonMap['Message'] = Message;
    pigeonMap['RefNum'] = RefNum;
    pigeonMap['RawResponse'] = RawResponse;
    pigeonMap['RemainingBalance'] = RemainingBalance;
    pigeonMap['ExtraBalance'] = ExtraBalance;
    pigeonMap['RequestedAmount'] = RequestedAmount;
    pigeonMap['ResultCode'] = ResultCode;
    pigeonMap['ResultTxt'] = ResultTxt;
    pigeonMap['Timestamp'] = Timestamp;
    pigeonMap['SigFileName'] = SigFileName;
    pigeonMap['SignData'] = SignData;
    pigeonMap['TransactionIntegrityClass'] = TransactionIntegrityClass;
    pigeonMap['vASResponseInfo'] = vASResponseInfo?.encode();
    pigeonMap['tORResponseInfo'] = tORResponseInfo?.encode();
    pigeonMap['addlRspData'] = addlRspData?.encode();
    pigeonMap['restaurant'] = restaurant?.encode();
    pigeonMap['multiMerchant'] = multiMerchant?.encode();
    pigeonMap['cardInfo'] = cardInfo?.encode();
    pigeonMap['fleetCard'] = fleetCard?.encode();
    pigeonMap['paymentTransInfo'] = paymentTransInfo?.encode();
    pigeonMap['paymentEmvTag'] = paymentEmvTag?.encode();
    pigeonMap['ExtData'] = ExtData;
    return pigeonMap;
  }

  static PaymentResponse decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return PaymentResponse(
      AuthCode: pigeonMap['AuthCode'] as String?,
      ApprovedAmount: pigeonMap['ApprovedAmount'] as String?,
      AvsResponse: pigeonMap['AvsResponse'] as String?,
      BogusAccountNum: pigeonMap['BogusAccountNum'] as String?,
      CardType: pigeonMap['CardType'] as String?,
      CvResponse: pigeonMap['CvResponse'] as String?,
      HostCode: pigeonMap['HostCode'] as String?,
      HostResponse: pigeonMap['HostResponse'] as String?,
      Message: pigeonMap['Message'] as String?,
      RefNum: pigeonMap['RefNum'] as String?,
      RawResponse: pigeonMap['RawResponse'] as String?,
      RemainingBalance: pigeonMap['RemainingBalance'] as String?,
      ExtraBalance: pigeonMap['ExtraBalance'] as String?,
      RequestedAmount: pigeonMap['RequestedAmount'] as String?,
      ResultCode: pigeonMap['ResultCode'] as String?,
      ResultTxt: pigeonMap['ResultTxt'] as String?,
      Timestamp: pigeonMap['Timestamp'] as String?,
      SigFileName: pigeonMap['SigFileName'] as String?,
      SignData: pigeonMap['SignData'] as String?,
      TransactionIntegrityClass: pigeonMap['TransactionIntegrityClass'] as String?,
      vASResponseInfo: pigeonMap['vASResponseInfo'] != null
          ? VASResponseInfo.decode(pigeonMap['vASResponseInfo']!)
          : null,
      tORResponseInfo: pigeonMap['tORResponseInfo'] != null
          ? TORResponseInfo.decode(pigeonMap['tORResponseInfo']!)
          : null,
      addlRspData: pigeonMap['addlRspData'] != null
          ? AddlRspData.decode(pigeonMap['addlRspData']!)
          : null,
      restaurant: pigeonMap['restaurant'] != null
          ? Restaurant.decode(pigeonMap['restaurant']!)
          : null,
      multiMerchant: pigeonMap['multiMerchant'] != null
          ? MultiMerchant.decode(pigeonMap['multiMerchant']!)
          : null,
      cardInfo: pigeonMap['cardInfo'] != null
          ? CardInfo.decode(pigeonMap['cardInfo']!)
          : null,
      fleetCard: pigeonMap['fleetCard'] != null
          ? FleetCard.decode(pigeonMap['fleetCard']!)
          : null,
      paymentTransInfo: pigeonMap['paymentTransInfo'] != null
          ? PaymentTransInfo.decode(pigeonMap['paymentTransInfo']!)
          : null,
      paymentEmvTag: pigeonMap['paymentEmvTag'] != null
          ? PaymentEmvTag.decode(pigeonMap['paymentEmvTag']!)
          : null,
      ExtData: pigeonMap['ExtData'] as String?,
    );
  }
}

class PaymentTransInfo {
  PaymentTransInfo({
    this.OrigTip,
    this.EdcType,
    this.PrintLine1,
    this.PrintLine2,
    this.PrintLine3,
    this.PrintLine4,
    this.PrintLine5,
    this.EwicBenefitExpd,
    this.EwicBalance,
    this.EwicDetail,
    this.ReverseAmount,
    this.ReversalStatus,
    this.TokenSerialNum,
  });

  String? OrigTip;
  String? EdcType;
  String? PrintLine1;
  String? PrintLine2;
  String? PrintLine3;
  String? PrintLine4;
  String? PrintLine5;
  String? EwicBenefitExpd;
  String? EwicBalance;
  String? EwicDetail;
  String? ReverseAmount;
  String? ReversalStatus;
  String? TokenSerialNum;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['OrigTip'] = OrigTip;
    pigeonMap['EdcType'] = EdcType;
    pigeonMap['PrintLine1'] = PrintLine1;
    pigeonMap['PrintLine2'] = PrintLine2;
    pigeonMap['PrintLine3'] = PrintLine3;
    pigeonMap['PrintLine4'] = PrintLine4;
    pigeonMap['PrintLine5'] = PrintLine5;
    pigeonMap['EwicBenefitExpd'] = EwicBenefitExpd;
    pigeonMap['EwicBalance'] = EwicBalance;
    pigeonMap['EwicDetail'] = EwicDetail;
    pigeonMap['ReverseAmount'] = ReverseAmount;
    pigeonMap['ReversalStatus'] = ReversalStatus;
    pigeonMap['TokenSerialNum'] = TokenSerialNum;
    return pigeonMap;
  }

  static PaymentTransInfo decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return PaymentTransInfo(
      OrigTip: pigeonMap['OrigTip'] as String?,
      EdcType: pigeonMap['EdcType'] as String?,
      PrintLine1: pigeonMap['PrintLine1'] as String?,
      PrintLine2: pigeonMap['PrintLine2'] as String?,
      PrintLine3: pigeonMap['PrintLine3'] as String?,
      PrintLine4: pigeonMap['PrintLine4'] as String?,
      PrintLine5: pigeonMap['PrintLine5'] as String?,
      EwicBenefitExpd: pigeonMap['EwicBenefitExpd'] as String?,
      EwicBalance: pigeonMap['EwicBalance'] as String?,
      EwicDetail: pigeonMap['EwicDetail'] as String?,
      ReverseAmount: pigeonMap['ReverseAmount'] as String?,
      ReversalStatus: pigeonMap['ReversalStatus'] as String?,
      TokenSerialNum: pigeonMap['TokenSerialNum'] as String?,
    );
  }
}

class TORResponseInfo {
  TORResponseInfo({
    this.RecordType,
    this.ReversalTimeStamp,
    this.HostResponseCode,
    this.HostResponseMessage,
    this.HostReferenceNumber,
    this.GatewayTransactionID,
    this.OrigAmount,
    this.MaskedPAN,
    this.BatchNo,
    this.ReversalAuthCode,
    this.OrigTransType,
    this.OrigTransDateTime,
    this.OrigTransAuthCode,
  });

  String? RecordType;
  String? ReversalTimeStamp;
  String? HostResponseCode;
  String? HostResponseMessage;
  String? HostReferenceNumber;
  String? GatewayTransactionID;
  String? OrigAmount;
  String? MaskedPAN;
  String? BatchNo;
  String? ReversalAuthCode;
  String? OrigTransType;
  String? OrigTransDateTime;
  String? OrigTransAuthCode;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['RecordType'] = RecordType;
    pigeonMap['ReversalTimeStamp'] = ReversalTimeStamp;
    pigeonMap['HostResponseCode'] = HostResponseCode;
    pigeonMap['HostResponseMessage'] = HostResponseMessage;
    pigeonMap['HostReferenceNumber'] = HostReferenceNumber;
    pigeonMap['GatewayTransactionID'] = GatewayTransactionID;
    pigeonMap['OrigAmount'] = OrigAmount;
    pigeonMap['MaskedPAN'] = MaskedPAN;
    pigeonMap['BatchNo'] = BatchNo;
    pigeonMap['ReversalAuthCode'] = ReversalAuthCode;
    pigeonMap['OrigTransType'] = OrigTransType;
    pigeonMap['OrigTransDateTime'] = OrigTransDateTime;
    pigeonMap['OrigTransAuthCode'] = OrigTransAuthCode;
    return pigeonMap;
  }

  static TORResponseInfo decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return TORResponseInfo(
      RecordType: pigeonMap['RecordType'] as String?,
      ReversalTimeStamp: pigeonMap['ReversalTimeStamp'] as String?,
      HostResponseCode: pigeonMap['HostResponseCode'] as String?,
      HostResponseMessage: pigeonMap['HostResponseMessage'] as String?,
      HostReferenceNumber: pigeonMap['HostReferenceNumber'] as String?,
      GatewayTransactionID: pigeonMap['GatewayTransactionID'] as String?,
      OrigAmount: pigeonMap['OrigAmount'] as String?,
      MaskedPAN: pigeonMap['MaskedPAN'] as String?,
      BatchNo: pigeonMap['BatchNo'] as String?,
      ReversalAuthCode: pigeonMap['ReversalAuthCode'] as String?,
      OrigTransType: pigeonMap['OrigTransType'] as String?,
      OrigTransDateTime: pigeonMap['OrigTransDateTime'] as String?,
      OrigTransAuthCode: pigeonMap['OrigTransAuthCode'] as String?,
    );
  }
}

class VASResponseInfo {
  VASResponseInfo({
    this.VASCode,
    this.VASData,
    this.NDEFData,
  });

  String? VASCode;
  List<String?>? VASData;
  String? NDEFData;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['VASCode'] = VASCode;
    pigeonMap['VASData'] = VASData;
    pigeonMap['NDEFData'] = NDEFData;
    return pigeonMap;
  }

  static VASResponseInfo decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return VASResponseInfo(
      VASCode: pigeonMap['VASCode'] as String?,
      VASData: (pigeonMap['VASData'] as List<Object?>?)?.cast<String?>(),
      NDEFData: pigeonMap['NDEFData'] as String?,
    );
  }
}

class ProcessResult {
  ProcessResult({
    this.c,
    this.a,
    this.b,
  });

  Map<String?, String?>? c;
  String? a;
  String? b;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['c'] = c;
    pigeonMap['a'] = a;
    pigeonMap['b'] = b;
    return pigeonMap;
  }

  static ProcessResult decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return ProcessResult(
      c: (pigeonMap['c'] as Map<Object?, Object?>?)?.cast<String?, String?>(),
      a: pigeonMap['a'] as String?,
      b: pigeonMap['b'] as String?,
    );
  }
}

class PrinterRequest {
  PrinterRequest({
    this.formatPrintStr,
    this.cutMode,
    this.bitMapImage,
    this.alignment,
  });

  String? formatPrintStr;
  int? cutMode;
  Uint8List? bitMapImage;
  int? alignment;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['formatPrintStr'] = formatPrintStr;
    pigeonMap['cutMode'] = cutMode;
    pigeonMap['bitMapImage'] = bitMapImage;
    pigeonMap['alignment'] = alignment;
    return pigeonMap;
  }

  static PrinterRequest decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return PrinterRequest(
      formatPrintStr: pigeonMap['formatPrintStr'] as String?,
      cutMode: pigeonMap['cutMode'] as int?,
      bitMapImage: pigeonMap['bitMapImage'] as Uint8List?,
      alignment: pigeonMap['alignment'] as int?,
    );
  }
}

class ScanResult {
  ScanResult({
    this.a,
    this.b,
  });

  String? a;
  String? b;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['a'] = a;
    pigeonMap['b'] = b;
    return pigeonMap;
  }

  static ScanResult decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return ScanResult(
      a: pigeonMap['a'] as String?,
      b: pigeonMap['b'] as String?,
    );
  }
}

class _PaxPosApiCodec extends StandardMessageCodec {
  const _PaxPosApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is AddlRspData) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else 
    if (value is AutoRentalInfo) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else 
    if (value is CardInfo) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else 
    if (value is CommercialCard) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else 
    if (value is ExtraChargeItem) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    } else 
    if (value is FleetCard) {
      buffer.putUint8(133);
      writeValue(buffer, value.encode());
    } else 
    if (value is HostCredentialInformation) {
      buffer.putUint8(134);
      writeValue(buffer, value.encode());
    } else 
    if (value is HostGateWay) {
      buffer.putUint8(135);
      writeValue(buffer, value.encode());
    } else 
    if (value is LineItemDetail) {
      buffer.putUint8(136);
      writeValue(buffer, value.encode());
    } else 
    if (value is LodgingInfo) {
      buffer.putUint8(137);
      writeValue(buffer, value.encode());
    } else 
    if (value is LodgingItem) {
      buffer.putUint8(138);
      writeValue(buffer, value.encode());
    } else 
    if (value is MultiMerchant) {
      buffer.putUint8(139);
      writeValue(buffer, value.encode());
    } else 
    if (value is Original) {
      buffer.putUint8(140);
      writeValue(buffer, value.encode());
    } else 
    if (value is PaymentEmvTag) {
      buffer.putUint8(141);
      writeValue(buffer, value.encode());
    } else 
    if (value is PaymentRequest) {
      buffer.putUint8(142);
      writeValue(buffer, value.encode());
    } else 
    if (value is PaymentResponse) {
      buffer.putUint8(143);
      writeValue(buffer, value.encode());
    } else 
    if (value is PaymentTransInfo) {
      buffer.putUint8(144);
      writeValue(buffer, value.encode());
    } else 
    if (value is PrinterRequest) {
      buffer.putUint8(145);
      writeValue(buffer, value.encode());
    } else 
    if (value is ProcessResult) {
      buffer.putUint8(146);
      writeValue(buffer, value.encode());
    } else 
    if (value is Restaurant) {
      buffer.putUint8(147);
      writeValue(buffer, value.encode());
    } else 
    if (value is RoomRates) {
      buffer.putUint8(148);
      writeValue(buffer, value.encode());
    } else 
    if (value is ScanResult) {
      buffer.putUint8(149);
      writeValue(buffer, value.encode());
    } else 
    if (value is TORResponseInfo) {
      buffer.putUint8(150);
      writeValue(buffer, value.encode());
    } else 
    if (value is TaxDetail) {
      buffer.putUint8(151);
      writeValue(buffer, value.encode());
    } else 
    if (value is TransactionBehavior) {
      buffer.putUint8(152);
      writeValue(buffer, value.encode());
    } else 
    if (value is VASResponseInfo) {
      buffer.putUint8(153);
      writeValue(buffer, value.encode());
    } else 
{
      super.writeValue(buffer, value);
    }
  }
  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:       
        return AddlRspData.decode(readValue(buffer)!);
      
      case 129:       
        return AutoRentalInfo.decode(readValue(buffer)!);
      
      case 130:       
        return CardInfo.decode(readValue(buffer)!);
      
      case 131:       
        return CommercialCard.decode(readValue(buffer)!);
      
      case 132:       
        return ExtraChargeItem.decode(readValue(buffer)!);
      
      case 133:       
        return FleetCard.decode(readValue(buffer)!);
      
      case 134:       
        return HostCredentialInformation.decode(readValue(buffer)!);
      
      case 135:       
        return HostGateWay.decode(readValue(buffer)!);
      
      case 136:       
        return LineItemDetail.decode(readValue(buffer)!);
      
      case 137:       
        return LodgingInfo.decode(readValue(buffer)!);
      
      case 138:       
        return LodgingItem.decode(readValue(buffer)!);
      
      case 139:       
        return MultiMerchant.decode(readValue(buffer)!);
      
      case 140:       
        return Original.decode(readValue(buffer)!);
      
      case 141:       
        return PaymentEmvTag.decode(readValue(buffer)!);
      
      case 142:       
        return PaymentRequest.decode(readValue(buffer)!);
      
      case 143:       
        return PaymentResponse.decode(readValue(buffer)!);
      
      case 144:       
        return PaymentTransInfo.decode(readValue(buffer)!);
      
      case 145:       
        return PrinterRequest.decode(readValue(buffer)!);
      
      case 146:       
        return ProcessResult.decode(readValue(buffer)!);
      
      case 147:       
        return Restaurant.decode(readValue(buffer)!);
      
      case 148:       
        return RoomRates.decode(readValue(buffer)!);
      
      case 149:       
        return ScanResult.decode(readValue(buffer)!);
      
      case 150:       
        return TORResponseInfo.decode(readValue(buffer)!);
      
      case 151:       
        return TaxDetail.decode(readValue(buffer)!);
      
      case 152:       
        return TransactionBehavior.decode(readValue(buffer)!);
      
      case 153:       
        return VASResponseInfo.decode(readValue(buffer)!);
      
      default:      
        return super.readValueOfType(type, buffer);
      
    }
  }
}

class PaxPosApi {
  /// Constructor for [PaxPosApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  PaxPosApi({BinaryMessenger? binaryMessenger}) : _binaryMessenger = binaryMessenger;

  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _PaxPosApiCodec();

  Future<PaymentResponse> charge(PaymentRequest arg_paymentRequest) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PaxPosApi.charge', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_paymentRequest]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else if (replyMap['result'] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyMap['result'] as PaymentResponse?)!;
    }
  }

  Future<ProcessResult> print(PrinterRequest arg_printerRequest) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PaxPosApi.print', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_printerRequest]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else if (replyMap['result'] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyMap['result'] as ProcessResult?)!;
    }
  }

  Future<ScanResult> ScanHW() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PaxPosApi.ScanHW', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(null) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else if (replyMap['result'] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyMap['result'] as ScanResult?)!;
    }
  }

  Future<ScanResult> Scan() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PaxPosApi.Scan', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(null) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else if (replyMap['result'] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyMap['result'] as ScanResult?)!;
    }
  }
}
